- hosts: jumpbox
  gather_facts: false
  tasks:

   - name: Fetch Instance Info
     os_server_facts:
      cloud: ospcloud
      region_name: RegionOne
     register: result
   - name: Add host to
     add_host:
      name: "{{ item.public_v4 }}"
      group: "{{ item.metadata.group }}"
     with_items: "{{result.ansible_facts.openstack_servers}}"
   - name: Add host
     add_host:
      name: "{{ item.public_v4 }}"
      group: "{{ item.metadata.deployment_name }}"
     with_items: "{{result.ansible_facts.openstack_servers}}"


- name: configuration
  hosts: all
  gather_facts: false # remove later! speeds up testing
  become: true

  tasks:
  - name: enable repos
    template:
      src: ./open_three-tier-app.repo
      dest: /etc/yum.repos.d/open_three-tier-app.repo
      mode: 0644

- name: deploy haproxy
  hosts: frontends
  gather_facts: false # remove later! speeds up testing
  become: true
  vars:
    GUID: 4c38
  tasks:
  - name: http
    yum:
      name: httpd
      state: latest
  - name: install HAProxy
    yum:
      name=haproxy 
      state=latest
  - name: enable HAProxy
    service:
      name: haproxy
      state: started
  - name: configure haproxy
    template:
      src: ./haproxy.cfg.j2
      dest: /etc/haproxy/haproxy.cfg
  - name: restart HAproxy
    service:
      name: haproxy
      state: restarted


- name: deploy tomcat
  hosts: apps
  gather_facts: false
  become: true

  tasks:
  - name: install tomcat
    yum:
      name: tomcat
      state: latest
  - name: enable tomcat at boot
    service:
      name: tomcat
      enabled: yes

  - shell: sed -i -i "s/8080/80/g" /etc/tomcat/server.xml

  - name: create ansible tomcat directory
    file:
      path: /usr/share/tomcat/webapps/ROOT
      state: directory

  - name: copy static index.html to tomcat webapps/ansible/index.html
    template:
      src: index.html.j2
      dest: /usr/share/tomcat/webapps/ROOT/index.html
      mode: 0644

  - name: start tomcat
    service:
      name: tomcat
      state: started

- name: index.html on app 1
#  hosts: "{{ groups.apps.0 }}"
  hosts: apps
  gather_facts: false
  become: true

  tasks:
  - name: create ansible tomcat directory
    file:
      path: /usr/share/tomcat/webapps/ansible/
      state: directory
  - file:
      path: /var/www/html/ansible/
      state: directory

  - name: copy static index.html to tomcat webapps/ansible/index.html
    template:
      src: index.html.app
      dest: /usr/share/tomcat/webapps/ansible/index.html

  - template:
      src: index.html.app
      dest: /var/www/html/ansible/index.html

- name: deploy postgres
#  hosts: apps
  hosts: appdbs
  gather_facts: false
  become: true
  tasks:
  - name: install postgres
    yum:
      name: postgresql-server
      state: latest
  - name: enable apache at boot
    service:
      name: postgresql
      enabled: yes
  - name: tell user to finish setting up postgres
    debug:
      msg: "Either uncomment the postgres setup or manually login and initialize"

  - stat:
      path: /etc/postgres-initilize
    register: result

 # only run the next 2 tasks once!
  - name: initilize postgres
    command: postgresql-setup initdb
    when: not result.stat.exists

  - file:
      path: /etc/postgres-initilize
      state: touch

  - name: initilize postgres some more
    service:
      name: postgresql.service
      state: started
      enabled: yes

- name: deploy apache
  hosts: apps
  gather_facts: false
  become: true
  tasks:
  - name: install apache
    yum:
      name: httpd
      state: latest
  - name: enable apache at boot
    service:
      name: httpd
      enabled: yes
  - name: start apache
    service:
      name: httpd
      state: started
